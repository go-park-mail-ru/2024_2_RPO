openapi: 3.0.2
info:
  title: Pumpkin API
  version: 1.0.0
  description: RESTful API для облачного канбана Pumpkin
servers:
  - url: https://to.be.defined/api
    description: Основной сервер API

components:
  securitySchemes:
    SessionCookieAuth:
      type: apiKey
      in: cookie
      name: session_id

  responses:
    EmptyOkResponse:
      description: "Успех"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmptyOkResponse"
    BadRequestResponse:
      description: "В запросе нет нужных полей или они не прошли валидацию или ошибка в query-параметрах"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              text:
                type: string
                example: "bad request"
    NoAuthResponse:
      description: "Вы не авторизованы"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              text:
                type: string
                example: "not authentified"
    ForbiddenResponse:
      description: "Нет прав на действие"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 403
              text:
                type: string
                example: "forbidden"
    NotFoundResponse:
      description: "Такой элемент не найден"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              text:
                type: string
                example: "not found"
  parameters:
    boardId:
      name: boardId
      in: path
      required: true
      schema:
        type: string
        example: "board_456"
    cardId:
      name: cardId
      in: path
      required: true
      schema:
        type: string
        example: "card_789"
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        example: "user_343"
    columnId:
      name: columnId
      in: path
      required: true
      schema:
        type: string
        example: "column_228"

  schemas:
    EmptyOkResponse:
      type: object
      properties:
        status:
          type: integer
          enum: [200]
          example: 200
        text:
          type: string
          example: "ok"

    BadResponse:
      type: object
      properties:
        status:
          type: integer
          example: 403
        text:
          type: string
          example: "not authorized"

    User:
      type: object
      properties:
        id:
          type: number
          example: 123
        name:
          type: string
          example: "Tarasovxx"
        email:
          type: string
          format: email
          example: "tarasovxx@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-01T12:34:56Z"
        avatarImageUrl:
          type: string
          example: "/images/avatars/23423432432423.png"

    UserPut:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "Tarasovxx"
        email:
          type: string
          format: email
          example: "tarasovxx@example.com"

    Board:
      type: object
      properties:
        id:
          type: integer
          example: 228
        name:
          type: string
          example: "Любимый проект"
        description:
          type: string
          example: "На этой доске размещены задачи любимого проекта! <3"
        backgroundImageUrl:
          type: string
          example: "/static/backgroundImage.png"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-01T12:34:56Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-10-01T12:34:56Z"

    BoardPut:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: "Любимый проект"
        description:
          type: string
          example: "На этой доске размещены задачи любимого проекта! <3"

    BoardContent:
      type: object
      properties:
        boardInfo:
          $ref: "#/components/schemas/Board"
        allColumns:
          type: array
          items:
            $ref: "#/components/schemas/Column"
        allCards:
          type: array
          items:
            $ref: "#/components/schemas/Card"

    Card:
      type: object
      properties:
        id:
          type: integer
          example: 789
        title:
          type: string
          example: "Задача 1"
        description:
          type: string
          example: "Описание задачи 1"
        columnId:
          type: string
          example: "col_228"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-01T12:34:56Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-10-01T12:34:56Z"

    CardPostRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "Новая задача"
        columnId:
          type: integer
          example: 3

    Column:
      type: object
      properties:
        id:
          type: integer
          example: 228
        title:
          type: string
          example: "Backlog"

    ColumnRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "Backlog"

    UserPermissions:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        addedAt:
          type: string
          format: date-time
          example: "2023-10-01T12:34:56Z"
        role:
          type: string
          enum: ["viewer","editor","editor_chief","admin"]
          example: "viewer"
        updatedAt:
          type: string
          format: date-time
          example: "2023-10-01T12:34:56Z"
        addedBy:
          $ref: "#/components/schemas/User"
        updatedBy:
          $ref: "#/components/schemas/User"

    UserPermissionsPut:
      type: object
      required:
        - newRole
      properties:
        newRole:
          type: string
          enum: ["viewer", "editor", "editor_chief", "admin"]
          example: "viewer"

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "Tarasov_Artem"
        email:
          type: string
          format: email
          example: "tarasovxx@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "tarasovxx@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"

    PasswordChangeRequest:
      type: object
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          format: password
          example: "314159265"
        newPassword:
          type: string
          format: password
          example: "securepassword123"

paths:
  /auth/register:
    post:
      summary: "Регистрация нового пользователя"
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: "Пользователь успешно зарегистрирован"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session_id=342324234324
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyOkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "409":
          description: "Аккаунт с таким email/login уже зарегистрирован. Набор сообщений об ошибке фиксированный, см. схему"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 409
                    enum: [409]
                  text:
                    type: string
                    example: "Email is busy"
                    enum:
                      [
                        "Email is busy",
                        "Login is busy",
                        "Email and login are busy",
                      ]

  /auth/login:
    post:
      summary: Авторизация пользователя
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успешная авторизация
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session_id=342324234324
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyOkResponse"
        "401":
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadResponse"
  /auth/logout:
    post:
      summary: Выйти из системы
      security:
        - SessionCookieAuth: []
      tags:
        - Аутентификация
      responses:
        "200":
          $ref: "#/components/responses/EmptyOkResponse"
        "400":
          description: "Вы не залогинены"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadResponse"
  /auth/changePassword:
    post:
      summary: Изменить пароль
      security:
        - SessionCookieAuth: []
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChangeRequest"
      responses:
        "200":
          $ref: "#/components/responses/EmptyOkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "403":
          description: "Старый пароль неправильный"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadResponse"

  /users/me:
    get:
      summary: Получить информацию о себе
      tags:
        - Пользователи
      security:
        - SessionCookieAuth: []
      responses:
        "200":
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
    put:
      summary: Обновить информацию о себе
      tags:
        - Пользователи
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPut"
      responses:
        "200":
          $ref: "#/components/responses/EmptyOkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"

  /users/me/avatar:
    put:
      summary: "Установить пользователю аватарку"
      tags:
        - Пользователи
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: "Файл изображения аватарки"
      responses:
        "200":
          description: "Успешно обновлена аватарка"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"


  /boards:
    post:
      summary: Создать новую доску
      tags:
        - Доски
      security:
        - SessionCookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Новая доска"
      responses:
        "201":
          description: "Доска успешно создана"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"

  /boards/{boardId}:
    put:
      summary: "Изменить имя или описание доски"
      tags:
        - Доски
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BoardPut"
      responses:
        "200":
          description: "Доска успешно обновлена"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    delete:
      summary: Удалить доску
      tags:
        - Доски
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
      responses:
        "200":
          $ref: "#/components/responses/EmptyOkResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /boards/{boardId}/backgroundImage:
    put:
      summary: "Установить на доску изображение заднего фона"
      tags:
        - Доски
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                background:
                  type: string
                  format: binary
                  description: "Файл изображения заднего фона"
      responses:
        "200":
          description: "Успешно обновлён задний фон"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"

  /boards/my:
    get:
      summary: "Получить все доски, о которых знает пользователь"
      tags:
        - Доски
      security:
        - SessionCookieAuth: []
      responses:
        "200":
          description: "Доски успешно получены"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Board"
        "401":
          $ref: "#/components/responses/NoAuthResponse"

  /userPermissions/{boardId}:
    get:
      summary: "Получить информацию о правах всех пользователей на этой доске"
      tags:
        - Разрешения пользователей
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
      responses:
        "200":
          description: "Список прав пользователей"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserPermissions"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    post:
      summary: "Добавить пользователя на доску"
      tags:
        - Разрешения пользователей
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nickname
              properties:
                nickname:
                  type: string
                  example: "Tarasovxx"
      responses:
        "200":
          description: "Список прав пользователей"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserPermissions"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /userPermissions/{boardId}/{userId}:
    put:
      summary: "Изменить права пользователя"
      tags:
        - Разрешения пользователей
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/UserPermissionsPut"
      responses:
        "200":
          description: "Успех"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPermissions"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    delete:
      summary: "Выгнать пользователя"
      tags:
        - Разрешения пользователей
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
        - $ref: "#/components/parameters/userId"

      responses:
        "200":
          $ref: "#/components/responses/EmptyOkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /cards/{boardId}/allContent:
    get:
      summary: "Получить все карточки на доске, а также все столбцы (и в будущем - теги)"
      tags:
        - Карточки
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
      responses:
        "200":
          description: "Список карточек"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoardContent"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /cards/{boardId}:
    post:
      summary: "Создать новую карточку на доске"
      tags:
        - Карточки
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardPostRequest"
      responses:
        "200":
          description: "Карточка успешно создана"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /cards/{boardId}/{cardId}:
    patch:
      summary: Обновить карточку
      tags:
        - Карточки
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
        - $ref: "#/components/parameters/cardId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Обновленная задача"
                description:
                  type: string
                  example: "Обновленное описание задачи"
                status:
                  type: string
                  example: "In Progress"
      responses:
        "200":
          description: "Карточка успешно обновлена"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    delete:
      summary: "Удалить карточку"
      tags:
        - Карточки
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
        - $ref: "#/components/parameters/cardId"
      responses:
        "200":
          $ref: "#/components/responses/EmptyOkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /columns/{boardId}:
    post:
      summary: "Добавить новую колонку"
      tags:
        - Колонки
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColumnRequest"
      responses:
        "201":
          description: "Колонка успешно создана"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Column"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
  /columns/{boardId}/{columnId}:
    put:
      summary: "Изменить колонку"
      tags:
        - Колонки
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
        - $ref: "#/components/parameters/columnId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColumnRequest"
      responses:
        "201":
          description: "Колонка успешно создана"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Column"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    delete:
      summary: "Удалить колонку"
      tags:
        - Колонки
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/boardId"
        - $ref: "#/components/parameters/columnId"
      responses:
        "200":
          $ref: "#/components/responses/EmptyOkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/NoAuthResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

security:
  - SessionCookieAuth: []
