// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_poll is a generated GoMock package.
package mock_poll

import (
	models "RPO_back/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPollUsecase is a mock of PollUsecase interface.
type MockPollUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPollUsecaseMockRecorder
}

// MockPollUsecaseMockRecorder is the mock recorder for MockPollUsecase.
type MockPollUsecaseMockRecorder struct {
	mock *MockPollUsecase
}

// NewMockPollUsecase creates a new mock instance.
func NewMockPollUsecase(ctrl *gomock.Controller) *MockPollUsecase {
	mock := &MockPollUsecase{ctrl: ctrl}
	mock.recorder = &MockPollUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollUsecase) EXPECT() *MockPollUsecaseMockRecorder {
	return m.recorder
}

// GetPollQuestions mocks base method.
func (m *MockPollUsecase) GetPollQuestions(ctx context.Context, userID int64) ([]models.PollQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollQuestions", ctx, userID)
	ret0, _ := ret[0].([]models.PollQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollQuestions indicates an expected call of GetPollQuestions.
func (mr *MockPollUsecaseMockRecorder) GetPollQuestions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollQuestions", reflect.TypeOf((*MockPollUsecase)(nil).GetPollQuestions), ctx, userID)
}

// GetPollResults mocks base method.
func (m *MockPollUsecase) GetPollResults(ctx context.Context) (*models.PollResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollResults", ctx)
	ret0, _ := ret[0].(*models.PollResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollResults indicates an expected call of GetPollResults.
func (mr *MockPollUsecaseMockRecorder) GetPollResults(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollResults", reflect.TypeOf((*MockPollUsecase)(nil).GetPollResults), ctx)
}

// SubmitPoll mocks base method.
func (m *MockPollUsecase) SubmitPoll(ctx context.Context, userID int64, pollQuestion *models.PollSubmit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPoll", ctx, userID, pollQuestion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitPoll indicates an expected call of SubmitPoll.
func (mr *MockPollUsecaseMockRecorder) SubmitPoll(ctx, userID, pollQuestion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPoll", reflect.TypeOf((*MockPollUsecase)(nil).SubmitPoll), ctx, userID, pollQuestion)
}

// MockPollRepo is a mock of PollRepo interface.
type MockPollRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPollRepoMockRecorder
}

// MockPollRepoMockRecorder is the mock recorder for MockPollRepo.
type MockPollRepoMockRecorder struct {
	mock *MockPollRepo
}

// NewMockPollRepo creates a new mock instance.
func NewMockPollRepo(ctrl *gomock.Controller) *MockPollRepo {
	mock := &MockPollRepo{ctrl: ctrl}
	mock.recorder = &MockPollRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollRepo) EXPECT() *MockPollRepoMockRecorder {
	return m.recorder
}

// GetPollQuestions mocks base method.
func (m *MockPollRepo) GetPollQuestions(ctx context.Context) ([]models.PollQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollQuestions", ctx)
	ret0, _ := ret[0].([]models.PollQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollQuestions indicates an expected call of GetPollQuestions.
func (mr *MockPollRepoMockRecorder) GetPollQuestions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollQuestions", reflect.TypeOf((*MockPollRepo)(nil).GetPollQuestions), ctx)
}

// GetRatingResults mocks base method.
func (m *MockPollRepo) GetRatingResults(ctx context.Context) ([]models.RatingResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingResults", ctx)
	ret0, _ := ret[0].([]models.RatingResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingResults indicates an expected call of GetRatingResults.
func (mr *MockPollRepoMockRecorder) GetRatingResults(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingResults", reflect.TypeOf((*MockPollRepo)(nil).GetRatingResults), ctx)
}

// GetTextResults mocks base method.
func (m *MockPollRepo) GetTextResults(ctx context.Context) ([]models.AnswerResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextResults", ctx)
	ret0, _ := ret[0].([]models.AnswerResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextResults indicates an expected call of GetTextResults.
func (mr *MockPollRepoMockRecorder) GetTextResults(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextResults", reflect.TypeOf((*MockPollRepo)(nil).GetTextResults), ctx)
}

// SetNextPollDT mocks base method.
func (m *MockPollRepo) SetNextPollDT(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNextPollDT", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNextPollDT indicates an expected call of SetNextPollDT.
func (mr *MockPollRepoMockRecorder) SetNextPollDT(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextPollDT", reflect.TypeOf((*MockPollRepo)(nil).SetNextPollDT), ctx, userID)
}

// SubmitPoll mocks base method.
func (m *MockPollRepo) SubmitPoll(ctx context.Context, userID int64, pollSubmit *models.PollSubmit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPoll", ctx, userID, pollSubmit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitPoll indicates an expected call of SubmitPoll.
func (mr *MockPollRepoMockRecorder) SubmitPoll(ctx, userID, pollSubmit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPoll", reflect.TypeOf((*MockPollRepo)(nil).SubmitPoll), ctx, userID, pollSubmit)
}
