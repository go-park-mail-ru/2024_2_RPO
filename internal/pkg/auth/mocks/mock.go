// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	models "RPO_back/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAuthUsecase) ChangePassword(ctx context.Context, userID int, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userID, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthUsecaseMockRecorder) ChangePassword(ctx, userID, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthUsecase)(nil).ChangePassword), ctx, userID, oldPassword, newPassword)
}

// LoginUser mocks base method.
func (m *MockAuthUsecase) LoginUser(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthUsecaseMockRecorder) LoginUser(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthUsecase)(nil).LoginUser), ctx, email, password)
}

// LogoutUser mocks base method.
func (m *MockAuthUsecase) LogoutUser(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockAuthUsecaseMockRecorder) LogoutUser(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockAuthUsecase)(nil).LogoutUser), ctx, sessionID)
}

// RegisterUser mocks base method.
func (m *MockAuthUsecase) RegisterUser(ctx context.Context, user *models.UserRegistration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthUsecaseMockRecorder) RegisterUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthUsecase)(nil).RegisterUser), ctx, user)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CheckUniqueCredentials mocks base method.
func (m *MockAuthRepo) CheckUniqueCredentials(ctx context.Context, nickname, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUniqueCredentials", ctx, nickname, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUniqueCredentials indicates an expected call of CheckUniqueCredentials.
func (mr *MockAuthRepoMockRecorder) CheckUniqueCredentials(ctx, nickname, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUniqueCredentials", reflect.TypeOf((*MockAuthRepo)(nil).CheckUniqueCredentials), ctx, nickname, email)
}

// CreateUser mocks base method.
func (m *MockAuthRepo) CreateUser(ctx context.Context, user *models.UserRegistration, hashedPassword string) (*models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user, hashedPassword)
	ret0, _ := ret[0].(*models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoMockRecorder) CreateUser(ctx, user, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepo)(nil).CreateUser), ctx, user, hashedPassword)
}

// GetUserByEmail mocks base method.
func (m *MockAuthRepo) GetUserByEmail(ctx context.Context, email string) (*models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthRepoMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAuthRepo) GetUserByID(ctx context.Context, userID int) (*models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthRepoMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthRepo)(nil).GetUserByID), ctx, userID)
}

// KillSessionRedis mocks base method.
func (m *MockAuthRepo) KillSessionRedis(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillSessionRedis", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillSessionRedis indicates an expected call of KillSessionRedis.
func (mr *MockAuthRepoMockRecorder) KillSessionRedis(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillSessionRedis", reflect.TypeOf((*MockAuthRepo)(nil).KillSessionRedis), ctx, sessionID)
}

// RegisterSessionRedis mocks base method.
func (m *MockAuthRepo) RegisterSessionRedis(ctx context.Context, cookie string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSessionRedis", ctx, cookie, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSessionRedis indicates an expected call of RegisterSessionRedis.
func (mr *MockAuthRepoMockRecorder) RegisterSessionRedis(ctx, cookie, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSessionRedis", reflect.TypeOf((*MockAuthRepo)(nil).RegisterSessionRedis), ctx, cookie, userID)
}

// RetrieveUserIdFromSessionId mocks base method.
func (m *MockAuthRepo) RetrieveUserIdFromSessionId(ctx context.Context, sessionId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUserIdFromSessionId", ctx, sessionId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUserIdFromSessionId indicates an expected call of RetrieveUserIdFromSessionId.
func (mr *MockAuthRepoMockRecorder) RetrieveUserIdFromSessionId(ctx, sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUserIdFromSessionId", reflect.TypeOf((*MockAuthRepo)(nil).RetrieveUserIdFromSessionId), ctx, sessionId)
}

// SetNewPasswordHash mocks base method.
func (m *MockAuthRepo) SetNewPasswordHash(ctx context.Context, userID int, newPasswordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewPasswordHash", ctx, userID, newPasswordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNewPasswordHash indicates an expected call of SetNewPasswordHash.
func (mr *MockAuthRepoMockRecorder) SetNewPasswordHash(ctx, userID, newPasswordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewPasswordHash", reflect.TypeOf((*MockAuthRepo)(nil).SetNewPasswordHash), ctx, userID, newPasswordHash)
}
