// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	models "RPO_back/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
	isgomock struct{}
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockAuthUsecase) LoginUser(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthUsecaseMockRecorder) LoginUser(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthUsecase)(nil).LoginUser), email, password)
}

// LogoutUser mocks base method.
func (m *MockAuthUsecase) LogoutUser(sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockAuthUsecaseMockRecorder) LogoutUser(sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockAuthUsecase)(nil).LogoutUser), sessionId)
}

// RegisterUser mocks base method.
func (m *MockAuthUsecase) RegisterUser(user *models.UserRegistration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthUsecaseMockRecorder) RegisterUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthUsecase)(nil).RegisterUser), user)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
	isgomock struct{}
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CheckUniqueCredentials mocks base method.
func (m *MockAuthRepo) CheckUniqueCredentials(nickname, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUniqueCredentials", nickname, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUniqueCredentials indicates an expected call of CheckUniqueCredentials.
func (mr *MockAuthRepoMockRecorder) CheckUniqueCredentials(nickname, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUniqueCredentials", reflect.TypeOf((*MockAuthRepo)(nil).CheckUniqueCredentials), nickname, email)
}

// CreateUser mocks base method.
func (m *MockAuthRepo) CreateUser(user *models.UserRegistration, hashedPassword string) (*models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user, hashedPassword)
	ret0, _ := ret[0].(*models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoMockRecorder) CreateUser(user, hashedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepo)(nil).CreateUser), user, hashedPassword)
}

// GetUserByEmail mocks base method.
func (m *MockAuthRepo) GetUserByEmail(email string) (*models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthRepoMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthRepo)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockAuthRepo) GetUserByID(userID int) (*models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthRepoMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthRepo)(nil).GetUserByID), userID)
}

// KillSessionRedis mocks base method.
func (m *MockAuthRepo) KillSessionRedis(sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillSessionRedis", sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillSessionRedis indicates an expected call of KillSessionRedis.
func (mr *MockAuthRepoMockRecorder) KillSessionRedis(sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillSessionRedis", reflect.TypeOf((*MockAuthRepo)(nil).KillSessionRedis), sessionId)
}

// RegisterSessionRedis mocks base method.
func (m *MockAuthRepo) RegisterSessionRedis(cookie string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSessionRedis", cookie, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSessionRedis indicates an expected call of RegisterSessionRedis.
func (mr *MockAuthRepoMockRecorder) RegisterSessionRedis(cookie, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSessionRedis", reflect.TypeOf((*MockAuthRepo)(nil).RegisterSessionRedis), cookie, userID)
}

// RetrieveUserIdFromSessionId mocks base method.
func (m *MockAuthRepo) RetrieveUserIdFromSessionId(sessionId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUserIdFromSessionId", sessionId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUserIdFromSessionId indicates an expected call of RetrieveUserIdFromSessionId.
func (mr *MockAuthRepoMockRecorder) RetrieveUserIdFromSessionId(sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUserIdFromSessionId", reflect.TypeOf((*MockAuthRepo)(nil).RetrieveUserIdFromSessionId), sessionId)
}

// SetNewPasswordHash mocks base method.
func (m *MockAuthRepo) SetNewPasswordHash(userID int, newPasswordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewPasswordHash", userID, newPasswordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNewPasswordHash indicates an expected call of SetNewPasswordHash.
func (mr *MockAuthRepoMockRecorder) SetNewPasswordHash(userID, newPasswordHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewPasswordHash", reflect.TypeOf((*MockAuthRepo)(nil).SetNewPasswordHash), userID, newPasswordHash)
}
