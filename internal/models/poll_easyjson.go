// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB24b5487DecodeRPOBackInternalModels(in *jlexer.Lexer, out *RatingResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question":
			out.Question = string(in.String())
		case "rating":
			out.Rating = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB24b5487EncodeRPOBackInternalModels(out *jwriter.Writer, in RatingResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix[1:])
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.String(string(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatingResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB24b5487EncodeRPOBackInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatingResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB24b5487EncodeRPOBackInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatingResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB24b5487DecodeRPOBackInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatingResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB24b5487DecodeRPOBackInternalModels(l, v)
}
func easyjsonB24b5487DecodeRPOBackInternalModels1(in *jlexer.Lexer, out *PollSubmit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questionId":
			out.QuestionID = int64(in.Int64())
		case "questionType":
			out.QuestionType = string(in.String())
		case "rating":
			if in.IsNull() {
				in.Skip()
				out.Rating = nil
			} else {
				if out.Rating == nil {
					out.Rating = new(int)
				}
				*out.Rating = int(in.Int())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB24b5487EncodeRPOBackInternalModels1(out *jwriter.Writer, in PollSubmit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questionId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"questionType\":"
		out.RawString(prefix)
		out.String(string(in.QuestionType))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		if in.Rating == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Rating))
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		if in.Text == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Text))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PollSubmit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB24b5487EncodeRPOBackInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PollSubmit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB24b5487EncodeRPOBackInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PollSubmit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB24b5487DecodeRPOBackInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PollSubmit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB24b5487DecodeRPOBackInternalModels1(l, v)
}
func easyjsonB24b5487DecodeRPOBackInternalModels2(in *jlexer.Lexer, out *PollResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ratingResults":
			if in.IsNull() {
				in.Skip()
				out.RatingResults = nil
			} else {
				in.Delim('[')
				if out.RatingResults == nil {
					if !in.IsDelim(']') {
						out.RatingResults = make([]RatingResults, 0, 2)
					} else {
						out.RatingResults = []RatingResults{}
					}
				} else {
					out.RatingResults = (out.RatingResults)[:0]
				}
				for !in.IsDelim(']') {
					var v1 RatingResults
					(v1).UnmarshalEasyJSON(in)
					out.RatingResults = append(out.RatingResults, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "textResults":
			if in.IsNull() {
				in.Skip()
				out.TextResults = nil
			} else {
				in.Delim('[')
				if out.TextResults == nil {
					if !in.IsDelim(']') {
						out.TextResults = make([]AnswerResults, 0, 1)
					} else {
						out.TextResults = []AnswerResults{}
					}
				} else {
					out.TextResults = (out.TextResults)[:0]
				}
				for !in.IsDelim(']') {
					var v2 AnswerResults
					(v2).UnmarshalEasyJSON(in)
					out.TextResults = append(out.TextResults, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB24b5487EncodeRPOBackInternalModels2(out *jwriter.Writer, in PollResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ratingResults\":"
		out.RawString(prefix[1:])
		if in.RatingResults == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.RatingResults {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"textResults\":"
		out.RawString(prefix)
		if in.TextResults == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.TextResults {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PollResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB24b5487EncodeRPOBackInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PollResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB24b5487EncodeRPOBackInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PollResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB24b5487DecodeRPOBackInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PollResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB24b5487DecodeRPOBackInternalModels2(l, v)
}
func easyjsonB24b5487DecodeRPOBackInternalModels3(in *jlexer.Lexer, out *PollQuestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questionId":
			out.QuestionID = int64(in.Int64())
		case "questionText":
			out.QuestionText = string(in.String())
		case "questionType":
			out.QuestionType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB24b5487EncodeRPOBackInternalModels3(out *jwriter.Writer, in PollQuestion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questionId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"questionText\":"
		out.RawString(prefix)
		out.String(string(in.QuestionText))
	}
	{
		const prefix string = ",\"questionType\":"
		out.RawString(prefix)
		out.String(string(in.QuestionType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PollQuestion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB24b5487EncodeRPOBackInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PollQuestion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB24b5487EncodeRPOBackInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PollQuestion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB24b5487DecodeRPOBackInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PollQuestion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB24b5487DecodeRPOBackInternalModels3(l, v)
}
func easyjsonB24b5487DecodeRPOBackInternalModels4(in *jlexer.Lexer, out *AnswerResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question":
			out.Question = string(in.String())
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				in.Delim('[')
				if out.Text == nil {
					if !in.IsDelim(']') {
						out.Text = make([]string, 0, 4)
					} else {
						out.Text = []string{}
					}
				} else {
					out.Text = (out.Text)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Text = append(out.Text, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB24b5487EncodeRPOBackInternalModels4(out *jwriter.Writer, in AnswerResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix[1:])
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		if in.Text == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Text {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswerResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB24b5487EncodeRPOBackInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswerResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB24b5487EncodeRPOBackInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswerResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB24b5487DecodeRPOBackInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswerResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB24b5487DecodeRPOBackInternalModels4(l, v)
}
