// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson11d1a9baDecodeRPOBackInternalModels(in *jlexer.Lexer, out *UserRegisterRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels(out *jwriter.Writer, in UserRegisterRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserRegisterRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserRegisterRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserRegisterRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserRegisterRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels1(in *jlexer.Lexer, out *UserProfileUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.NewName = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels1(out *jwriter.Writer, in UserProfileUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfileUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfileUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfileUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfileUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels1(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels2(in *jlexer.Lexer, out *UpdateMemberRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newRole":
			out.NewRole = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels2(out *jwriter.Writer, in UpdateMemberRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newRole\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewRole))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateMemberRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateMemberRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateMemberRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateMemberRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels2(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels3(in *jlexer.Lexer, out *TagRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels3(out *jwriter.Writer, in TagRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels3(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels4(in *jlexer.Lexer, out *LoginRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels4(out *jwriter.Writer, in LoginRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels4(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels5(in *jlexer.Lexer, out *ElasticRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels5(out *jwriter.Writer, in ElasticRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElasticRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElasticRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElasticRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElasticRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels5(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels6(in *jlexer.Lexer, out *CommentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels6(out *jwriter.Writer, in CommentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels6(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels7(in *jlexer.Lexer, out *ColumnRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.NewTitle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels7(out *jwriter.Writer, in ColumnRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewTitle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ColumnRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ColumnRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ColumnRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ColumnRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels7(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels8(in *jlexer.Lexer, out *ColumnMoveRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "previousColumnId":
			if in.IsNull() {
				in.Skip()
				out.PreviousColumnID = nil
			} else {
				if out.PreviousColumnID == nil {
					out.PreviousColumnID = new(int64)
				}
				*out.PreviousColumnID = int64(in.Int64())
			}
		case "nextColumnId":
			if in.IsNull() {
				in.Skip()
				out.NextColumnID = nil
			} else {
				if out.NextColumnID == nil {
					out.NextColumnID = new(int64)
				}
				*out.NextColumnID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels8(out *jwriter.Writer, in ColumnMoveRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"previousColumnId\":"
		out.RawString(prefix[1:])
		if in.PreviousColumnID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PreviousColumnID))
		}
	}
	{
		const prefix string = ",\"nextColumnId\":"
		out.RawString(prefix)
		if in.NextColumnID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.NextColumnID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ColumnMoveRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ColumnMoveRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ColumnMoveRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ColumnMoveRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels8(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels9(in *jlexer.Lexer, out *CheckListFieldPostRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels9(out *jwriter.Writer, in CheckListFieldPostRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckListFieldPostRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckListFieldPostRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckListFieldPostRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckListFieldPostRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels9(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels10(in *jlexer.Lexer, out *CheckListFieldPatchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "isDone":
			if in.IsNull() {
				in.Skip()
				out.IsDone = nil
			} else {
				if out.IsDone == nil {
					out.IsDone = new(bool)
				}
				*out.IsDone = bool(in.Bool())
			}
		case "previousFieldId":
			if in.IsNull() {
				in.Skip()
				out.PreviousFieldID = nil
			} else {
				if out.PreviousFieldID == nil {
					out.PreviousFieldID = new(int64)
				}
				*out.PreviousFieldID = int64(in.Int64())
			}
		case "nextFieldId":
			if in.IsNull() {
				in.Skip()
				out.NextFieldID = nil
			} else {
				if out.NextFieldID == nil {
					out.NextFieldID = new(int64)
				}
				*out.NextFieldID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels10(out *jwriter.Writer, in CheckListFieldPatchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"isDone\":"
		out.RawString(prefix)
		if in.IsDone == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsDone))
		}
	}
	{
		const prefix string = ",\"previousFieldId\":"
		out.RawString(prefix)
		if in.PreviousFieldID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PreviousFieldID))
		}
	}
	{
		const prefix string = ",\"nextFieldId\":"
		out.RawString(prefix)
		if in.NextFieldID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.NextFieldID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckListFieldPatchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckListFieldPatchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckListFieldPatchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckListFieldPatchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels10(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels11(in *jlexer.Lexer, out *ChangePasswordRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newPassword":
			out.NewPassword = string(in.String())
		case "oldPassword":
			out.OldPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels11(out *jwriter.Writer, in ChangePasswordRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newPassword\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewPassword))
	}
	{
		const prefix string = ",\"oldPassword\":"
		out.RawString(prefix)
		out.String(string(in.OldPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangePasswordRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangePasswordRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangePasswordRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangePasswordRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels11(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels12(in *jlexer.Lexer, out *CardPostRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "columnId":
			if in.IsNull() {
				in.Skip()
				out.ColumnID = nil
			} else {
				if out.ColumnID == nil {
					out.ColumnID = new(int64)
				}
				*out.ColumnID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels12(out *jwriter.Writer, in CardPostRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"columnId\":"
		out.RawString(prefix)
		if in.ColumnID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ColumnID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardPostRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardPostRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardPostRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardPostRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels12(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels13(in *jlexer.Lexer, out *CardPatchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.NewTitle = nil
			} else {
				if out.NewTitle == nil {
					out.NewTitle = new(string)
				}
				*out.NewTitle = string(in.String())
			}
		case "deadline":
			if in.IsNull() {
				in.Skip()
				out.NewDeadline = nil
			} else {
				if out.NewDeadline == nil {
					out.NewDeadline = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NewDeadline).UnmarshalJSON(data))
				}
			}
		case "isDone":
			if in.IsNull() {
				in.Skip()
				out.IsDone = nil
			} else {
				if out.IsDone == nil {
					out.IsDone = new(bool)
				}
				*out.IsDone = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels13(out *jwriter.Writer, in CardPatchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.NewTitle == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NewTitle))
		}
	}
	{
		const prefix string = ",\"deadline\":"
		out.RawString(prefix)
		if in.NewDeadline == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.NewDeadline).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"isDone\":"
		out.RawString(prefix)
		if in.IsDone == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsDone))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardPatchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardPatchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardPatchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardPatchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels13(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels14(in *jlexer.Lexer, out *CardMoveRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newColumnId":
			if in.IsNull() {
				in.Skip()
				out.NewColumnID = nil
			} else {
				if out.NewColumnID == nil {
					out.NewColumnID = new(int64)
				}
				*out.NewColumnID = int64(in.Int64())
			}
		case "previousCardId":
			if in.IsNull() {
				in.Skip()
				out.PreviousCardID = nil
			} else {
				if out.PreviousCardID == nil {
					out.PreviousCardID = new(int64)
				}
				*out.PreviousCardID = int64(in.Int64())
			}
		case "nextCardId":
			if in.IsNull() {
				in.Skip()
				out.NextCardID = nil
			} else {
				if out.NextCardID == nil {
					out.NextCardID = new(int64)
				}
				*out.NextCardID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels14(out *jwriter.Writer, in CardMoveRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newColumnId\":"
		out.RawString(prefix[1:])
		if in.NewColumnID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.NewColumnID))
		}
	}
	{
		const prefix string = ",\"previousCardId\":"
		out.RawString(prefix)
		if in.PreviousCardID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PreviousCardID))
		}
	}
	{
		const prefix string = ",\"nextCardId\":"
		out.RawString(prefix)
		if in.NextCardID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.NextCardID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardMoveRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardMoveRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardMoveRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardMoveRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels14(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels15(in *jlexer.Lexer, out *BoardRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.NewName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels15(out *jwriter.Writer, in BoardRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels15(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels16(in *jlexer.Lexer, out *AssignUserRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.NickName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels16(out *jwriter.Writer, in AssignUserRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix[1:])
		out.String(string(in.NickName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AssignUserRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AssignUserRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AssignUserRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AssignUserRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels16(l, v)
}
func easyjson11d1a9baDecodeRPOBackInternalModels17(in *jlexer.Lexer, out *AddMemberRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.MemberNickname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeRPOBackInternalModels17(out *jwriter.Writer, in AddMemberRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix[1:])
		out.String(string(in.MemberNickname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddMemberRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeRPOBackInternalModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddMemberRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeRPOBackInternalModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddMemberRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeRPOBackInternalModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddMemberRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeRPOBackInternalModels17(l, v)
}
