// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeRPOBackInternalModels(in *jlexer.Lexer, out *SharedCardFoundResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "boardId":
			out.BoardID = int64(in.Int64())
		case "cardId":
			out.CardID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeRPOBackInternalModels(out *jwriter.Writer, in SharedCardFoundResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"boardId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.BoardID))
	}
	{
		const prefix string = ",\"cardId\":"
		out.RawString(prefix)
		out.Int64(int64(in.CardID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SharedCardFoundResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeRPOBackInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SharedCardFoundResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeRPOBackInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SharedCardFoundResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeRPOBackInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SharedCardFoundResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeRPOBackInternalModels(l, v)
}
func easyjson559270aeDecodeRPOBackInternalModels1(in *jlexer.Lexer, out *SharedCardDummyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board":
			if in.IsNull() {
				in.Skip()
				out.Board = nil
			} else {
				if out.Board == nil {
					out.Board = new(Board)
				}
				(*out.Board).UnmarshalEasyJSON(in)
			}
		case "card":
			if in.IsNull() {
				in.Skip()
				out.Card = nil
			} else {
				if out.Card == nil {
					out.Card = new(CardDetails)
				}
				(*out.Card).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeRPOBackInternalModels1(out *jwriter.Writer, in SharedCardDummyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board\":"
		out.RawString(prefix[1:])
		if in.Board == nil {
			out.RawString("null")
		} else {
			(*in.Board).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"card\":"
		out.RawString(prefix)
		if in.Card == nil {
			out.RawString("null")
		} else {
			(*in.Card).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SharedCardDummyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeRPOBackInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SharedCardDummyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeRPOBackInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SharedCardDummyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeRPOBackInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SharedCardDummyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeRPOBackInternalModels1(l, v)
}
func easyjson559270aeDecodeRPOBackInternalModels2(in *jlexer.Lexer, out *BadResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeRPOBackInternalModels2(out *jwriter.Writer, in BadResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BadResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeRPOBackInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BadResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeRPOBackInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BadResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeRPOBackInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BadResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeRPOBackInternalModels2(l, v)
}
